{"remainingRequest":"/Users/joshua/Documents/github/playground-leaflet/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/joshua/Documents/github/playground-leaflet/src/components/Leaflet.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/joshua/Documents/github/playground-leaflet/src/components/Leaflet.vue","mtime":1568976691499},{"path":"/Users/joshua/Documents/github/playground-leaflet/node_modules/cache-loader/dist/cjs.js","mtime":1567587455346},{"path":"/Users/joshua/Documents/github/playground-leaflet/node_modules/thread-loader/dist/cjs.js","mtime":1568369272257},{"path":"/Users/joshua/Documents/github/playground-leaflet/node_modules/babel-loader/lib/index.js","mtime":1567587447972},{"path":"/Users/joshua/Documents/github/playground-leaflet/node_modules/cache-loader/dist/cjs.js","mtime":1567587455346},{"path":"/Users/joshua/Documents/github/playground-leaflet/node_modules/vue-loader/lib/index.js","mtime":1568369272418}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport L from \"leaflet\";\nimport \"leaflet-draw\";\nimport { hexGrid } from \"@turf/turf\";\nimport { polygon } from \"leaflet\";\nimport { GeoSearchControl, OpenStreetMapProvider } from \"leaflet-geosearch\";\n//\n\nexport default {\n  components: {},\n  data() {\n    return {\n      hexa: false,\n      hexaEdit: false,\n      layer: false,\n      layerEdit: false,\n      hexgrid: false,\n      hexgridEdit: false,\n      geosearchOptions: {\n        provider: new OpenStreetMapProvider()\n      }\n    };\n  },\n  mounted() {\n    //\n    // Init map on mounted\n    this.initialize();\n    ////\n  },\n  methods: {\n    //\n    // Init map function\n    initialize() {\n      var map = new L.map(\"map\").setView([48.5, -0.09], 11);\n\n      // Add layer mapbox\n      L.tileLayer(\n        \"https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}{r}.png?access_token=pk.eyJ1IjoicGllcnJpY2twIiwiYSI6ImNqaHZyZnRtbjB6M2ozcW52anQyNHFka3UifQ.0XBtUMCMEvMaML6dDifhIw\",\n        {\n          attribution: `&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors`,\n          maxZoom: 19\n        }\n      ).addTo(map);\n\n      //\n      // Add one marker example\n      L.marker([48.5, -0.09])\n        .addTo(map)\n        .bindPopup(\"Le texte du marker<br> On peut y mettre du code HTML\");\n      ////\n\n      //\n      // Init draw controle\n      // Initialise the FeatureGroup to store editable layers\n      var drawItems = new L.featureGroup().addTo(map);\n\n      // Initialise the draw control and pass it the FeatureGroup of editable layers\n      var drawControl = new L.Control.Draw({\n        position: \"topright\",\n        draw: {\n          circle: false, // Turns off this drawing tool\n          polyline: false,\n          circlemarker: false,\n          marker: false,\n          polygon: {\n            allowIntersection: false, // Restricts shapes\n            drawError: {\n              color: \"#e1e100\", // Color the shape will turn when intersects\n              message: \"<strong>Oh snap!<strong> you can't draw that!\" // Message that will show when intersect\n            },\n            shapeOptions: {\n              color: \"#bada55\"\n            }\n          },\n          rectangle: {\n            allowIntersection: false, // Restricts shapes\n            drawError: {\n              color: \"#e1e100\", // Color the shape will turn when intersects\n              message: \"<strong>Oh snap!<strong> you can't draw that!\" // Message that will show when intersect\n            },\n            shapeOptions: {\n              color: \"#bada55\",\n              clickable: false\n            }\n          }\n        },\n        edit: {\n          featureGroup: drawItems,\n          remove: false\n        }\n      });\n      // Add draw control on map\n      map.addControl(drawControl);\n\n      // Add search barre\n      const provider = new OpenStreetMapProvider();\n\n      const searchControl = new GeoSearchControl({\n        provider: provider\n      });\n      map.addControl(searchControl);\n\n      // Create Zone\n      map.on(\"draw:created\", function(e) {\n        var type = e.layerType,\n          layer = e.layer;\n\n        function arrayOfCoordinates(array) {\n          const layer = array;\n          const newLayer = [];\n          const nowLayer = [];\n          layer.forEach(element => {\n            const elmt = Object.values(element);\n            const array = [];\n            array.push(elmt[1]);\n            array.push(elmt[0]);\n            newLayer.push(array);\n          });\n          newLayer.push(newLayer[0]);\n          nowLayer.push(newLayer);\n          return nowLayer;\n        }\n\n        function hexGrid(array) {\n          var bbox = turf.bbox(turf.polygon(array));\n          var cellSide = 400;\n          var options = { units: \"meters\", mask: turf.polygon(array) };\n          var hexgrid = turf.hexGrid(bbox, cellSide, options);\n          return hexgrid;\n        }\n        let arrayCreated = layer.getLatLngs();\n\n        this.layer = arrayOfCoordinates(arrayCreated[0]);\n        this.hexa = hexGrid(this.layer);\n        // For the copy\n        var toCopy = document.getElementById(\"to-copy\"),\n          btnCopy = document.getElementById(\"copy\");\n        btnCopy.addEventListener(\"click\", function() {\n          toCopy.select();\n          document.execCommand(\"copy\");\n          return false;\n        });\n        // Inject getpoints into textarea\n        toCopy.innerHTML = JSON.stringify(this.hexa);\n\n        this.hexgrid = L.geoJSON(this.hexa).addTo(map);\n\n        drawItems.addLayer(layer);\n\n        // Updating poly/rectangle\n        map.on(\"draw:editstop\", function(e) {\n          // Delete actual hexgrid\n          map.removeLayer(this.hexgrid);\n\n          // Update hexgrid\n          let arrayEdited = layer.getLatLngs();\n          this.layerEdit = arrayOfCoordinates(arrayEdited[0]);\n          this.hexaEdit = hexGrid(this.layerEdit);\n\n          // For the copy\n          var toCopy = document.getElementById(\"to-copy\"),\n            btnCopy = document.getElementById(\"copy\");\n          btnCopy.addEventListener(\"click\", function() {\n            toCopy.select();\n            document.execCommand(\"copy\");\n            return false;\n          });\n          // Inject getpoints into textarea\n          toCopy.innerHTML = JSON.stringify(this.hexaEdit);\n          // Update hexgrid\n          this.hexgridEdit = L.geoJSON(this.hexaEdit).addTo(map);\n        });\n      });\n      map.on(\"draw:deletestop\", function(e) {\n        var layers = e.layers;\n        map.removeLayer(this.hexgridEdit);\n      });\n    }\n  }\n};\n",{"version":3,"sources":["Leaflet.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Leaflet.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\">\n    <div id=\"map\"></div>\n\n    <div id=\"export\">\n      <div class=\"title-export\">\n        <h1>Get Points</h1>\n        <p>(after created or edited)</p>\n      </div>\n      <textarea id=\"to-copy\"></textarea>\n      <button id=\"copy\" type=\"button\">Copy to clipboard</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport L from \"leaflet\";\nimport \"leaflet-draw\";\nimport { hexGrid } from \"@turf/turf\";\nimport { polygon } from \"leaflet\";\nimport { GeoSearchControl, OpenStreetMapProvider } from \"leaflet-geosearch\";\n//\n\nexport default {\n  components: {},\n  data() {\n    return {\n      hexa: false,\n      hexaEdit: false,\n      layer: false,\n      layerEdit: false,\n      hexgrid: false,\n      hexgridEdit: false,\n      geosearchOptions: {\n        provider: new OpenStreetMapProvider()\n      }\n    };\n  },\n  mounted() {\n    //\n    // Init map on mounted\n    this.initialize();\n    ////\n  },\n  methods: {\n    //\n    // Init map function\n    initialize() {\n      var map = new L.map(\"map\").setView([48.5, -0.09], 11);\n\n      // Add layer mapbox\n      L.tileLayer(\n        \"https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}{r}.png?access_token=pk.eyJ1IjoicGllcnJpY2twIiwiYSI6ImNqaHZyZnRtbjB6M2ozcW52anQyNHFka3UifQ.0XBtUMCMEvMaML6dDifhIw\",\n        {\n          attribution: `&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors`,\n          maxZoom: 19\n        }\n      ).addTo(map);\n\n      //\n      // Add one marker example\n      L.marker([48.5, -0.09])\n        .addTo(map)\n        .bindPopup(\"Le texte du marker<br> On peut y mettre du code HTML\");\n      ////\n\n      //\n      // Init draw controle\n      // Initialise the FeatureGroup to store editable layers\n      var drawItems = new L.featureGroup().addTo(map);\n\n      // Initialise the draw control and pass it the FeatureGroup of editable layers\n      var drawControl = new L.Control.Draw({\n        position: \"topright\",\n        draw: {\n          circle: false, // Turns off this drawing tool\n          polyline: false,\n          circlemarker: false,\n          marker: false,\n          polygon: {\n            allowIntersection: false, // Restricts shapes\n            drawError: {\n              color: \"#e1e100\", // Color the shape will turn when intersects\n              message: \"<strong>Oh snap!<strong> you can't draw that!\" // Message that will show when intersect\n            },\n            shapeOptions: {\n              color: \"#bada55\"\n            }\n          },\n          rectangle: {\n            allowIntersection: false, // Restricts shapes\n            drawError: {\n              color: \"#e1e100\", // Color the shape will turn when intersects\n              message: \"<strong>Oh snap!<strong> you can't draw that!\" // Message that will show when intersect\n            },\n            shapeOptions: {\n              color: \"#bada55\",\n              clickable: false\n            }\n          }\n        },\n        edit: {\n          featureGroup: drawItems,\n          remove: false\n        }\n      });\n      // Add draw control on map\n      map.addControl(drawControl);\n\n      // Add search barre\n      const provider = new OpenStreetMapProvider();\n\n      const searchControl = new GeoSearchControl({\n        provider: provider\n      });\n      map.addControl(searchControl);\n\n      // Create Zone\n      map.on(\"draw:created\", function(e) {\n        var type = e.layerType,\n          layer = e.layer;\n\n        function arrayOfCoordinates(array) {\n          const layer = array;\n          const newLayer = [];\n          const nowLayer = [];\n          layer.forEach(element => {\n            const elmt = Object.values(element);\n            const array = [];\n            array.push(elmt[1]);\n            array.push(elmt[0]);\n            newLayer.push(array);\n          });\n          newLayer.push(newLayer[0]);\n          nowLayer.push(newLayer);\n          return nowLayer;\n        }\n\n        function hexGrid(array) {\n          var bbox = turf.bbox(turf.polygon(array));\n          var cellSide = 400;\n          var options = { units: \"meters\", mask: turf.polygon(array) };\n          var hexgrid = turf.hexGrid(bbox, cellSide, options);\n          return hexgrid;\n        }\n        let arrayCreated = layer.getLatLngs();\n\n        this.layer = arrayOfCoordinates(arrayCreated[0]);\n        this.hexa = hexGrid(this.layer);\n        // For the copy\n        var toCopy = document.getElementById(\"to-copy\"),\n          btnCopy = document.getElementById(\"copy\");\n        btnCopy.addEventListener(\"click\", function() {\n          toCopy.select();\n          document.execCommand(\"copy\");\n          return false;\n        });\n        // Inject getpoints into textarea\n        toCopy.innerHTML = JSON.stringify(this.hexa);\n\n        this.hexgrid = L.geoJSON(this.hexa).addTo(map);\n\n        drawItems.addLayer(layer);\n\n        // Updating poly/rectangle\n        map.on(\"draw:editstop\", function(e) {\n          // Delete actual hexgrid\n          map.removeLayer(this.hexgrid);\n\n          // Update hexgrid\n          let arrayEdited = layer.getLatLngs();\n          this.layerEdit = arrayOfCoordinates(arrayEdited[0]);\n          this.hexaEdit = hexGrid(this.layerEdit);\n\n          // For the copy\n          var toCopy = document.getElementById(\"to-copy\"),\n            btnCopy = document.getElementById(\"copy\");\n          btnCopy.addEventListener(\"click\", function() {\n            toCopy.select();\n            document.execCommand(\"copy\");\n            return false;\n          });\n          // Inject getpoints into textarea\n          toCopy.innerHTML = JSON.stringify(this.hexaEdit);\n          // Update hexgrid\n          this.hexgridEdit = L.geoJSON(this.hexaEdit).addTo(map);\n        });\n      });\n      map.on(\"draw:deletestop\", function(e) {\n        var layers = e.layers;\n        map.removeLayer(this.hexgridEdit);\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.container {\n  display: flex;\n}\n#map {\n  width: 66vw;\n  height: 100vh;\n}\n\n#export {\n  width: 33vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n}\n\n#to-copy {\n  margin: 5%;\n  width: 80%;\n  height: 30%;\n}\n#copy {\n  width: 20%;\n}\n</style>"]}]}