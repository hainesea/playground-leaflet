{"remainingRequest":"/Users/joshua/Documents/fluctuo/playground-maps/node_modules/babel-loader/lib/index.js!/Users/joshua/Documents/fluctuo/playground-maps/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/joshua/Documents/fluctuo/playground-maps/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/joshua/Documents/fluctuo/playground-maps/src/components/Leaflet.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/joshua/Documents/fluctuo/playground-maps/src/components/Leaflet.vue","mtime":1568971297792},{"path":"/Users/joshua/Documents/fluctuo/playground-maps/node_modules/cache-loader/dist/cjs.js","mtime":1567587455346},{"path":"/Users/joshua/Documents/fluctuo/playground-maps/node_modules/babel-loader/lib/index.js","mtime":1567587447972},{"path":"/Users/joshua/Documents/fluctuo/playground-maps/node_modules/cache-loader/dist/cjs.js","mtime":1567587455346},{"path":"/Users/joshua/Documents/fluctuo/playground-maps/node_modules/vue-loader/lib/index.js","mtime":1568369272418}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport L from \"leaflet\";\nimport \"leaflet-draw\";\nimport { hexGrid } from \"@turf/turf\";\nimport { polygon } from \"leaflet\";\nimport { GeoSearchControl, OpenStreetMapProvider } from \"leaflet-geosearch\"; //\n\nexport default {\n  components: {},\n  data: function data() {\n    return {\n      hexa: false,\n      hexaEdit: false,\n      layer: false,\n      layerEdit: false,\n      hexgrid: false,\n      hexgridEdit: false,\n      geosearchOptions: {\n        provider: new OpenStreetMapProvider()\n      }\n    };\n  },\n  mounted: function mounted() {\n    //\n    // Init map on mounted\n    this.initialize(); ////\n  },\n  methods: {\n    //\n    // Init map function\n    initialize: function initialize() {\n      var map = new L.map(\"map\").setView([48.5, -0.09], 11); // Add layer mapbox\n\n      L.tileLayer(\"https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}{r}.png?access_token=pk.eyJ1IjoicGllcnJpY2twIiwiYSI6ImNqaHZyZnRtbjB6M2ozcW52anQyNHFka3UifQ.0XBtUMCMEvMaML6dDifhIw\", {\n        attribution: \"&copy; <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n        maxZoom: 19\n      }).addTo(map); //\n      // Add one marker example\n\n      L.marker([48.5, -0.09]).addTo(map).bindPopup(\"Le texte du marker<br> On peut y mettre du code HTML\"); ////\n      //\n      // Init draw controle\n      // Initialise the FeatureGroup to store editable layers\n\n      var drawItems = new L.featureGroup().addTo(map); // Initialise the draw control and pass it the FeatureGroup of editable layers\n\n      var drawControl = new L.Control.Draw({\n        position: \"topright\",\n        draw: {\n          circle: false,\n          // Turns off this drawing tool\n          polyline: false,\n          circlemarker: false,\n          marker: false,\n          polygon: {\n            allowIntersection: false,\n            // Restricts shapes\n            drawError: {\n              color: \"#e1e100\",\n              // Color the shape will turn when intersects\n              message: \"<strong>Oh snap!<strong> you can't draw that!\" // Message that will show when intersect\n\n            },\n            shapeOptions: {\n              color: \"#bada55\"\n            }\n          },\n          rectangle: {\n            allowIntersection: false,\n            // Restricts shapes\n            drawError: {\n              color: \"#e1e100\",\n              // Color the shape will turn when intersects\n              message: \"<strong>Oh snap!<strong> you can't draw that!\" // Message that will show when intersect\n\n            },\n            shapeOptions: {\n              color: \"#bada55\",\n              clickable: false\n            }\n          }\n        },\n        edit: {\n          featureGroup: drawItems,\n          remove: true\n        }\n      }); // Add draw control on map\n\n      map.addControl(drawControl); // Add search barre\n\n      var provider = new OpenStreetMapProvider();\n      var searchControl = new GeoSearchControl({\n        provider: provider\n      });\n      map.addControl(searchControl); // Create Zone\n\n      map.on(\"draw:created\", function (e) {\n        var type = e.layerType,\n            layer = e.layer;\n\n        function arrayOfCoordinates(array) {\n          var layer = array;\n          var newLayer = [];\n          var nowLayer = [];\n          layer.forEach(function (element) {\n            var elmt = Object.values(element);\n            var array = [];\n            array.push(elmt[1]);\n            array.push(elmt[0]);\n            newLayer.push(array);\n          });\n          newLayer.push(newLayer[0]);\n          nowLayer.push(newLayer);\n          return nowLayer;\n        }\n\n        function hexGrid(array) {\n          var bbox = turf.bbox(turf.polygon(array));\n          var cellSide = 400;\n          var options = {\n            units: \"meters\",\n            mask: turf.polygon(array)\n          };\n          var hexgrid = turf.hexGrid(bbox, cellSide, options);\n          return hexgrid;\n        }\n\n        var arrayCreated = layer.getLatLngs();\n        this.layer = arrayOfCoordinates(arrayCreated[0]);\n        this.hexa = hexGrid(this.layer); // For the copy\n\n        var toCopy = document.getElementById(\"to-copy\"),\n            btnCopy = document.getElementById(\"copy\");\n        btnCopy.addEventListener(\"click\", function () {\n          toCopy.select();\n          document.execCommand(\"copy\");\n          return false;\n        }); // Inject getpoints into textarea\n\n        toCopy.innerHTML = JSON.stringify(this.hexa);\n        this.hexgrid = L.geoJSON(this.hexa).addTo(map);\n        drawItems.addLayer(layer); // Updating poly/rectangle\n\n        map.on(\"draw:editstop\", function (e) {\n          // Delete actual hexgrid\n          map.removeLayer(this.hexgrid); // Update hexgrid\n\n          var arrayEdited = layer.getLatLngs();\n          this.layerEdit = arrayOfCoordinates(arrayEdited[0]);\n          this.hexaEdit = hexGrid(this.layerEdit); // For the copy\n\n          var toCopy = document.getElementById(\"to-copy\"),\n              btnCopy = document.getElementById(\"copy\");\n          btnCopy.addEventListener(\"click\", function () {\n            toCopy.select();\n            document.execCommand(\"copy\");\n            return false;\n          }); // Inject getpoints into textarea\n\n          toCopy.innerHTML = JSON.stringify(this.hexaEdit); // Update hexgrid\n\n          this.hexgridEdit = L.geoJSON(this.hexaEdit).addTo(map);\n        });\n      });\n      map.on(\"draw:deletestop\", function (e) {\n        var layers = e.layers;\n        map.removeLayer(this.hexgridEdit);\n      });\n    }\n  }\n};",{"version":3,"sources":["Leaflet.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAgBA,OAAA,CAAA,MAAA,SAAA;AACA,OAAA,cAAA;AACA,SAAA,OAAA,QAAA,YAAA;AACA,SAAA,OAAA,QAAA,SAAA;AACA,SAAA,gBAAA,EAAA,qBAAA,QAAA,mBAAA,C;;AAGA,eAAA;AACA,EAAA,UAAA,EAAA,EADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,KAAA,EAAA,KAHA;AAIA,MAAA,SAAA,EAAA,KAJA;AAKA,MAAA,OAAA,EAAA,KALA;AAMA,MAAA,WAAA,EAAA,KANA;AAOA,MAAA,gBAAA,EAAA;AACA,QAAA,QAAA,EAAA,IAAA,qBAAA;AADA;AAPA,KAAA;AAWA,GAdA;AAeA,EAAA,OAfA,qBAeA;AACA;AACA;AACA,SAAA,UAAA,GAHA,CAIA;AACA,GApBA;AAqBA,EAAA,OAAA,EAAA;AACA;AACA;AACA,IAAA,UAHA,wBAGA;AACA,UAAA,GAAA,GAAA,IAAA,CAAA,CAAA,GAAA,CAAA,KAAA,EAAA,OAAA,CAAA,CAAA,IAAA,EAAA,CAAA,IAAA,CAAA,EAAA,EAAA,CAAA,CADA,CAGA;;AACA,MAAA,CAAA,CAAA,SAAA,CACA,uKADA,EAEA;AACA,QAAA,WAAA,8EADA;AAEA,QAAA,OAAA,EAAA;AAFA,OAFA,EAMA,KANA,CAMA,GANA,EAJA,CAYA;AACA;;AACA,MAAA,CAAA,CAAA,MAAA,CAAA,CAAA,IAAA,EAAA,CAAA,IAAA,CAAA,EACA,KADA,CACA,GADA,EAEA,SAFA,CAEA,sDAFA,EAdA,CAiBA;AAEA;AACA;AACA;;AACA,UAAA,SAAA,GAAA,IAAA,CAAA,CAAA,YAAA,GAAA,KAAA,CAAA,GAAA,CAAA,CAtBA,CAwBA;;AACA,UAAA,WAAA,GAAA,IAAA,CAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AACA,QAAA,QAAA,EAAA,UADA;AAEA,QAAA,IAAA,EAAA;AACA,UAAA,MAAA,EAAA,KADA;AACA;AACA,UAAA,QAAA,EAAA,KAFA;AAGA,UAAA,YAAA,EAAA,KAHA;AAIA,UAAA,MAAA,EAAA,KAJA;AAKA,UAAA,OAAA,EAAA;AACA,YAAA,iBAAA,EAAA,KADA;AACA;AACA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA,SADA;AACA;AACA,cAAA,OAAA,EAAA,+CAFA,CAEA;;AAFA,aAFA;AAMA,YAAA,YAAA,EAAA;AACA,cAAA,KAAA,EAAA;AADA;AANA,WALA;AAeA,UAAA,SAAA,EAAA;AACA,YAAA,iBAAA,EAAA,KADA;AACA;AACA,YAAA,SAAA,EAAA;AACA,cAAA,KAAA,EAAA,SADA;AACA;AACA,cAAA,OAAA,EAAA,+CAFA,CAEA;;AAFA,aAFA;AAMA,YAAA,YAAA,EAAA;AACA,cAAA,KAAA,EAAA,SADA;AAEA,cAAA,SAAA,EAAA;AAFA;AANA;AAfA,SAFA;AA6BA,QAAA,IAAA,EAAA;AACA,UAAA,YAAA,EAAA,SADA;AAEA,UAAA,MAAA,EAAA;AAFA;AA7BA,OAAA,CAAA,CAzBA,CA2DA;;AACA,MAAA,GAAA,CAAA,UAAA,CAAA,WAAA,EA5DA,CA8DA;;AACA,UAAA,QAAA,GAAA,IAAA,qBAAA,EAAA;AAEA,UAAA,aAAA,GAAA,IAAA,gBAAA,CAAA;AACA,QAAA,QAAA,EAAA;AADA,OAAA,CAAA;AAGA,MAAA,GAAA,CAAA,UAAA,CAAA,aAAA,EApEA,CAsEA;;AACA,MAAA,GAAA,CAAA,EAAA,CAAA,cAAA,EAAA,UAAA,CAAA,EAAA;AACA,YAAA,IAAA,GAAA,CAAA,CAAA,SAAA;AAAA,YACA,KAAA,GAAA,CAAA,CAAA,KADA;;AAGA,iBAAA,kBAAA,CAAA,KAAA,EAAA;AACA,cAAA,KAAA,GAAA,KAAA;AACA,cAAA,QAAA,GAAA,EAAA;AACA,cAAA,QAAA,GAAA,EAAA;AACA,UAAA,KAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,gBAAA,IAAA,GAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA;AACA,gBAAA,KAAA,GAAA,EAAA;AACA,YAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA,YAAA,KAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA,YAAA,QAAA,CAAA,IAAA,CAAA,KAAA;AACA,WANA;AAOA,UAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA,CAAA;AACA,UAAA,QAAA,CAAA,IAAA,CAAA,QAAA;AACA,iBAAA,QAAA;AACA;;AAEA,iBAAA,OAAA,CAAA,KAAA,EAAA;AACA,cAAA,IAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA;AACA,cAAA,QAAA,GAAA,GAAA;AACA,cAAA,OAAA,GAAA;AAAA,YAAA,KAAA,EAAA,QAAA;AAAA,YAAA,IAAA,EAAA,IAAA,CAAA,OAAA,CAAA,KAAA;AAAA,WAAA;AACA,cAAA,OAAA,GAAA,IAAA,CAAA,OAAA,CAAA,IAAA,EAAA,QAAA,EAAA,OAAA,CAAA;AACA,iBAAA,OAAA;AACA;;AACA,YAAA,YAAA,GAAA,KAAA,CAAA,UAAA,EAAA;AAEA,aAAA,KAAA,GAAA,kBAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA;AACA,aAAA,IAAA,GAAA,OAAA,CAAA,KAAA,KAAA,CAAA,CA9BA,CA+BA;;AACA,YAAA,MAAA,GAAA,QAAA,CAAA,cAAA,CAAA,SAAA,CAAA;AAAA,YACA,OAAA,GAAA,QAAA,CAAA,cAAA,CAAA,MAAA,CADA;AAEA,QAAA,OAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,YAAA;AACA,UAAA,MAAA,CAAA,MAAA;AACA,UAAA,QAAA,CAAA,WAAA,CAAA,MAAA;AACA,iBAAA,KAAA;AACA,SAJA,EAlCA,CAuCA;;AACA,QAAA,MAAA,CAAA,SAAA,GAAA,IAAA,CAAA,SAAA,CAAA,KAAA,IAAA,CAAA;AAEA,aAAA,OAAA,GAAA,CAAA,CAAA,OAAA,CAAA,KAAA,IAAA,EAAA,KAAA,CAAA,GAAA,CAAA;AAEA,QAAA,SAAA,CAAA,QAAA,CAAA,KAAA,EA5CA,CA8CA;;AACA,QAAA,GAAA,CAAA,EAAA,CAAA,eAAA,EAAA,UAAA,CAAA,EAAA;AACA;AACA,UAAA,GAAA,CAAA,WAAA,CAAA,KAAA,OAAA,EAFA,CAIA;;AACA,cAAA,WAAA,GAAA,KAAA,CAAA,UAAA,EAAA;AACA,eAAA,SAAA,GAAA,kBAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA;AACA,eAAA,QAAA,GAAA,OAAA,CAAA,KAAA,SAAA,CAAA,CAPA,CASA;;AACA,cAAA,MAAA,GAAA,QAAA,CAAA,cAAA,CAAA,SAAA,CAAA;AAAA,cACA,OAAA,GAAA,QAAA,CAAA,cAAA,CAAA,MAAA,CADA;AAEA,UAAA,OAAA,CAAA,gBAAA,CAAA,OAAA,EAAA,YAAA;AACA,YAAA,MAAA,CAAA,MAAA;AACA,YAAA,QAAA,CAAA,WAAA,CAAA,MAAA;AACA,mBAAA,KAAA;AACA,WAJA,EAZA,CAiBA;;AACA,UAAA,MAAA,CAAA,SAAA,GAAA,IAAA,CAAA,SAAA,CAAA,KAAA,QAAA,CAAA,CAlBA,CAmBA;;AACA,eAAA,WAAA,GAAA,CAAA,CAAA,OAAA,CAAA,KAAA,QAAA,EAAA,KAAA,CAAA,GAAA,CAAA;AACA,SArBA;AAsBA,OArEA;AAsEA,MAAA,GAAA,CAAA,EAAA,CAAA,iBAAA,EAAA,UAAA,CAAA,EAAA;AACA,YAAA,MAAA,GAAA,CAAA,CAAA,MAAA;AACA,QAAA,GAAA,CAAA,WAAA,CAAA,KAAA,WAAA;AACA,OAHA;AAIA;AApJA;AArBA,CAAA","sourcesContent":["<template>\n  <div class=\"container\">\n    <div id=\"map\"></div>\n\n    <div id=\"export\">\n      <div class=\"title-export\">\n        <h1>Get Points</h1>\n        <p>(after created and edited)</p>\n      </div>\n      <textarea id=\"to-copy\"></textarea>\n      <button id=\"copy\" type=\"button\">Copy to clipboard</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport L from \"leaflet\";\nimport \"leaflet-draw\";\nimport { hexGrid } from \"@turf/turf\";\nimport { polygon } from \"leaflet\";\nimport { GeoSearchControl, OpenStreetMapProvider } from \"leaflet-geosearch\";\n//\n\nexport default {\n  components: {},\n  data() {\n    return {\n      hexa: false,\n      hexaEdit: false,\n      layer: false,\n      layerEdit: false,\n      hexgrid: false,\n      hexgridEdit: false,\n      geosearchOptions: {\n        provider: new OpenStreetMapProvider()\n      }\n    };\n  },\n  mounted() {\n    //\n    // Init map on mounted\n    this.initialize();\n    ////\n  },\n  methods: {\n    //\n    // Init map function\n    initialize() {\n      var map = new L.map(\"map\").setView([48.5, -0.09], 11);\n\n      // Add layer mapbox\n      L.tileLayer(\n        \"https://api.mapbox.com/v4/mapbox.streets/{z}/{x}/{y}{r}.png?access_token=pk.eyJ1IjoicGllcnJpY2twIiwiYSI6ImNqaHZyZnRtbjB6M2ozcW52anQyNHFka3UifQ.0XBtUMCMEvMaML6dDifhIw\",\n        {\n          attribution: `&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors`,\n          maxZoom: 19\n        }\n      ).addTo(map);\n\n      //\n      // Add one marker example\n      L.marker([48.5, -0.09])\n        .addTo(map)\n        .bindPopup(\"Le texte du marker<br> On peut y mettre du code HTML\");\n      ////\n\n      //\n      // Init draw controle\n      // Initialise the FeatureGroup to store editable layers\n      var drawItems = new L.featureGroup().addTo(map);\n\n      // Initialise the draw control and pass it the FeatureGroup of editable layers\n      var drawControl = new L.Control.Draw({\n        position: \"topright\",\n        draw: {\n          circle: false, // Turns off this drawing tool\n          polyline: false,\n          circlemarker: false,\n          marker: false,\n          polygon: {\n            allowIntersection: false, // Restricts shapes\n            drawError: {\n              color: \"#e1e100\", // Color the shape will turn when intersects\n              message: \"<strong>Oh snap!<strong> you can't draw that!\" // Message that will show when intersect\n            },\n            shapeOptions: {\n              color: \"#bada55\"\n            }\n          },\n          rectangle: {\n            allowIntersection: false, // Restricts shapes\n            drawError: {\n              color: \"#e1e100\", // Color the shape will turn when intersects\n              message: \"<strong>Oh snap!<strong> you can't draw that!\" // Message that will show when intersect\n            },\n            shapeOptions: {\n              color: \"#bada55\",\n              clickable: false\n            }\n          }\n        },\n        edit: {\n          featureGroup: drawItems,\n          remove: true\n        }\n      });\n      // Add draw control on map\n      map.addControl(drawControl);\n\n      // Add search barre\n      const provider = new OpenStreetMapProvider();\n\n      const searchControl = new GeoSearchControl({\n        provider: provider\n      });\n      map.addControl(searchControl);\n\n      // Create Zone\n      map.on(\"draw:created\", function(e) {\n        var type = e.layerType,\n          layer = e.layer;\n\n        function arrayOfCoordinates(array) {\n          const layer = array;\n          const newLayer = [];\n          const nowLayer = [];\n          layer.forEach(element => {\n            const elmt = Object.values(element);\n            const array = [];\n            array.push(elmt[1]);\n            array.push(elmt[0]);\n            newLayer.push(array);\n          });\n          newLayer.push(newLayer[0]);\n          nowLayer.push(newLayer);\n          return nowLayer;\n        }\n\n        function hexGrid(array) {\n          var bbox = turf.bbox(turf.polygon(array));\n          var cellSide = 400;\n          var options = { units: \"meters\", mask: turf.polygon(array) };\n          var hexgrid = turf.hexGrid(bbox, cellSide, options);\n          return hexgrid;\n        }\n        let arrayCreated = layer.getLatLngs();\n\n        this.layer = arrayOfCoordinates(arrayCreated[0]);\n        this.hexa = hexGrid(this.layer);\n        // For the copy\n        var toCopy = document.getElementById(\"to-copy\"),\n          btnCopy = document.getElementById(\"copy\");\n        btnCopy.addEventListener(\"click\", function() {\n          toCopy.select();\n          document.execCommand(\"copy\");\n          return false;\n        });\n        // Inject getpoints into textarea\n        toCopy.innerHTML = JSON.stringify(this.hexa);\n\n        this.hexgrid = L.geoJSON(this.hexa).addTo(map);\n\n        drawItems.addLayer(layer);\n\n        // Updating poly/rectangle\n        map.on(\"draw:editstop\", function(e) {\n          // Delete actual hexgrid\n          map.removeLayer(this.hexgrid);\n\n          // Update hexgrid\n          let arrayEdited = layer.getLatLngs();\n          this.layerEdit = arrayOfCoordinates(arrayEdited[0]);\n          this.hexaEdit = hexGrid(this.layerEdit);\n\n          // For the copy\n          var toCopy = document.getElementById(\"to-copy\"),\n            btnCopy = document.getElementById(\"copy\");\n          btnCopy.addEventListener(\"click\", function() {\n            toCopy.select();\n            document.execCommand(\"copy\");\n            return false;\n          });\n          // Inject getpoints into textarea\n          toCopy.innerHTML = JSON.stringify(this.hexaEdit);\n          // Update hexgrid\n          this.hexgridEdit = L.geoJSON(this.hexaEdit).addTo(map);\n        });\n      });\n      map.on(\"draw:deletestop\", function(e) {\n        var layers = e.layers;\n        map.removeLayer(this.hexgridEdit);\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.container {\n  display: flex;\n}\n#map {\n  width: 66vw;\n  height: 100vh;\n}\n\n#export {\n  width: 33vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n}\n\n#to-copy {\n  margin: 5%;\n  width: 80%;\n  height: 30%;\n}\n#copy {\n  width: 20%;\n}\n</style>"],"sourceRoot":"src/components"}]}